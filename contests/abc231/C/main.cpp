#include <iostream>
#include <sstream>
#include <fstream>
#include <string>
#include <vector>
#include <deque>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <algorithm>
#include <functional>
#include <utility>
#include <bitset>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstdio>
#include <cassert>
using namespace std;

void solve(long long N, long long Q, std::vector<long long> A, std::vector<long long> x)
{
    // x[index], index
    map<int, int> mp;
    for (int i = 0; i < Q; i++)
    {
        mp[x[i]] = i;
    }

    map<int, int> result;
    for (int i = 0; i < Q; i++)
    {
        if (x[i] < A[A.size() - 1])
        {
            result[x[i]] = A.size();
        }
        else
        {
            result[x[i]] = 0;
        }
    }

    std::vector<long long> X = x;

    sort(A.begin(), A.end(), std::greater<int>());
    sort(x.begin(), x.end(), std::greater<int>());

    int xIndex = 0;
    int aIndex = 0;
    int countX = 0;

    while (aIndex < A.size())
    {
        int ai = x[xIndex];
        int a = A[aIndex];
        //cout << "ai  " << ai << "  a  " << a << endl;
        if (ai <= a)
        {
            //cout << "count up" << endl;
            //cout << ai << "  " << "count" << endl;
            countX += 1;
            aIndex += 1;
        }
        else
        {
            //cout << "result x " << x[xIndex] << endl;
            //cout << "result countX " << countX << endl;
            result[x[xIndex]] = countX;
            xIndex += 1;
        }
    }

    for (int i = 0; i < X.size(); i++)
    {
        //cout << "x " << X[i] << endl;
        //cout << "result " << result[X[i]] << endl;
        cout << result[X[i]] << endl;
    }

    /*
    for (int j = 0; j < x.size(); j++)
    {
        int ans = 0;
        int ai = x[j];
        for (int i = 0; i < A.size(); i++)
        {
            if (A[i] >= ai)
            {
                ans += 1;
            }
        }
        cout << ans << endl;
    }
    */
}

// Generated by 2.11.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
int main()
{
    long long N;
    std::scanf("%lld", &N);
    long long Q;
    std::scanf("%lld", &Q);
    std::vector<long long> A(N);
    for (int i = 0; i < N; i++)
    {
        std::scanf("%lld", &A[i]);
    }
    std::vector<long long> x(Q);
    for (int i = 0; i < Q; i++)
    {
        std::scanf("%lld", &x[i]);
    }
    solve(N, Q, std::move(A), std::move(x));
    return 0;
}
